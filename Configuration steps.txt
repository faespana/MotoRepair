1. Iniciar el npm init -y

2. Crear el archivo app.js y un clg con "HOLA" para ser mostrado en el nodemon 

3. Abrir el cmd con nodemon y llamar a app.js

4. Crear las carpetas controllers, models, routes.

5. Crear los archivos .env on el puerto PORT = 3000 (e.g.) y .env.template con PORT = 

6. Crear el archivo .prettierrc
	6.1. Pasarle el siguiente objeto {
    							"tabWidth": 2,
    							"arrowParens": "avoid",
   							"singleQuote": true
							}

7. Instalar los paquetes npm i express cors dotenv (notar que se instalÃ³ la carpeta 
   node_modules y las dependencias.

8. Crear el archivo .gitignore y dentro escribir /.env /node_modules

9. Configurar mis variables de entorno en app.js require("dotenv").config()

10. A continuacion vamos a crear un archivo server.js dentro de la carpeta models e importar 
   express (const express = require("express")) y cors (const cors = require("cors"))
	10.1. Crear la clase Server y exportarla: class Server {

								  }
		module.exports = Server
	10.2.	Dentro de la clase, crear la funcion contructora con la siguiente informacion:
		
		    constructor() {
        		this.app = express()
        		this.port = process.env.PORT || 3000
        		this.paths = {
            		users: "(Aqui va el end point)",
            		repairs: "/api/v1/repairs"
        			}
    			}
	10.3. Dentro de la clase, crear mi funcion middleware con la siguiente informacion:

		    middlewares() {
        		this.app.use(cors())
        		this.app.use(express.json())
    		    {


	10.4. Dentro de la clase, crear mi funcion routes (por el momento va vacia).

	10.5. Dentro de la clase, crear mi funcion listen con la siguiente informacion:
		
		    listen() {
       		this.app.listen(this.port, () => {
       	 	console.log(`Server listening on port ${this.port}`)
       		}) 
    			} 

	10.6. Llamar a las funciones this.middlewares() / this.routes() dentro del constructor

11. Instanciar la clase para que se ejecute el contructor dentro de app.js:
	
	const Server = require('./models/server')
	const server = new Server()
	server.listen()

12. Dentro de la carpeta routes, creamos los archivos con nombres segun los endpoints que 
    se pusieron en los paths. eg. users.routes.js
	
	12.1. Colocar la siguiente informacion segun los CRUD's que se se requiran, no olvidar
		exportar (el procedimiento se repite de acuerdo a los endpoints):
	
		const { Router } = require("express");

		const router = Router()

		router.get("", findAllUsers)
		router.get("/:id", findUserById)

		router.post("", createUser)

		router.patch("/:id", updateUserById)

		router.delete("/:id", desableUserById)	  

		module.exports = {
    			UsersRouter: router
		}

13. Notando que se ha exportado en el routes, ir al server y en la funcion 
	routes()
		{
		this.app.use(this.paths.users, UsersRouter) (users/nombre del end point) 
		(UsersRouter / nombre de la exportacion no olvidar importarlo)	
	}   


14. En la carpeta de controllers, se debe crear archivos similares a los routes, pero con el
    nombre controllers. (Repetir el proceso con todos los demas CRUDs de las rutas)

	exports.findAllUsers = (req, res) => {
    		res.json({
        		status: "success",
        		message: "Method GET was Called"
    			})
		}

15. En los POST de los controladores, se le hace el req al body y se desestructura los valores
	que se van a pasar en el json, e.d. quedaria:
  
exports.createUser = (req, res) => {

    const { id, name, email, password, role, status } = req.body (los valores dependen de cliente)

    res.json({
        status: "success",
        massagge: "Method POST was Called",
        user: {
            id,
            name,
            email,
            password,
            role,
            status
        }
    })
} (en el postmanse uno se ubica en body, raw y se llenan los datos)


16. En los PATCH de los controladores, se le hace el req al params y se desestructura los valores
	que se van a pasar en el json, e.d. quedaria:

exports.updateRepairById = (req, res) => {

    const {id} = req.params
    const {date, status, userid} = req.body

    res.json({
        status: "success",
        messagge: "Method PATCH was Called",
        repair: {
            id,
            date,
            status,
            userid
        }
    })

}


17. Conexion a la base de datos: Abrir postgres introduciendo la contrasena con la que fue insta-
    lada 094493236.Fe.
	17.1. En el cmd en la carpeta que se esta trabajando, se debe instalar las siguientes paque-
		terias con npm i pg pg-hstore sequelize (comprobar que la instalacion haya sido correc-
		ta en las dependencias)
	17.2. Click derecho en Databases de pgAdmin y entrar a Create-Database colocar el nombre
		que le vamos a colocar a nuestra base de datos.
 
18. En VS crear la carpeta database y dentro un archivo db.js
	18.1. Importar Sequelize: const { Sequelize } = require("sequelize")
	18.2. Crear la clase Sequilize:
		
	const db = new Sequelize({
    		dialect: 'postgres',
    		host: 'localhost',
    		username: process.env.DB_USERNAME, (info en .env DB_USERNAME = postgres)
    		password: process.env.DB_PASSWORD, (info en .env DB_PASSWORD = 094493236.Fe)
    		database: 'e-commerceDB',
    		logging: false,
	});

module.exports = { db }; 

		
19. Creamos un metodo en el servidor, debajo de las rutas (db debe importarse en el servidor)

    database() {
        db.authenticate()
            .then(() => console.log('Database authenticated'))
            .catch(error => console.log(error));

        db.sync()
            .then(() => console.log('Database synced'))
            .catch(error => console.log(error));
    }

	19.1. Llamarlo dentro del constructor encima del this.middlewares(): this.database()


20. En la carpeta models vamos a crear un archivo que se llame user.model.js
	
	20.1. Importar desde sequelize DataTypes quedando y db, pero teniendo el archivo abierto:
		
		const { DataTypes } = require("sequelize");

		const { db } = require("../database/db");

	20.2. Crear una variable pero con mayusculas con el nombre del modelo y definir db de la 
		siguiente, manera no olvidarse de exportar:
		
		const User = db.define("user", {
    
		})


		module.exports = User;


	20.3. Dentro de User (y Product) en su objeto se debe ingresar la siguiente info, poner atencion a id y
		status:

		    id: {
        			primaryKey: true,
        			autoIncrement: true,
        			allowNull: false,
        			type: DataTypes.INTEGER,
   			 },

    			password: {
        			type: DataTypes.STRING,
        			allowNull: false,
    			},
    			
			role: {
        			type: DataTypes.STRING,
        			allowNull: false, (siempre va a tener un valor)
        			defaultValue: "user", (lo nombre por default)
        			enum: ["user", "admin"] (puede ser lo uno o lo otro solo permite ese tipo
									de datos)
			},
    			
			status: {
        			type: DataTypes.BOOLEAN,
       			allowNull: false,
        			defaultValue: true, (cada vez que se cree un usuario va a permanecer 
								activo a menos que se lo elimine)
    			},


21. Trabajando con el postman y crear una nueva collection
	21.1. Presionar el boton new que se encuentra a lado de My workspace, y crear una nueva
		collection (ECOMMERCE)

	21.2. En los tres puntitos que se encuentra a lado de la collection (ECOMMERCE), se debe 
		colocar los nombres de acuerdo a los endpoints, finalmente probar los post, sin el 
		status, ya que se pone por defecto.


22. Creando los primeros registros en la base de datos

	22.1. En product.controllers, en el POST (createProduct), se solicita al body lo que se desea
		mandar a la base de datos:
		
    		const { title, description, quantity, categoryId, userId, price } = req.body;
	
	22.2. Creamos la promesa con async y await, y al nombre del modelo (Product) se le aplica el 
		metodo create, quedando de la siguiente manera (ojo con los estados):

		createProduct = async (req, res) => {
    			const { title, description, quantity, categoryId, userId, price } =req.body; 
			//evita que el front mande propiedades que esten de mas

    			const newProduct = await Product.create({

        			title: title.toLowerCase(), (evita que el usario ponga mayusculas y minuscula intercaladas)
        			description: description.toLowerCase(),
        			quantity,
        			categoryId,
        			userId,
        			price,
    			});

    			
			res.status(201).json({
        			status: 'success',
        			message: 'The product was created successfully',
        			newProduct,
    			});
		};


	22.3. Para una mejor experiencia durante la actualizacion de los CRUDs y que aparezcan o no 
		en las bases de datos, se debe mejorar, primero el POST, despues el GET y el GET por id,
		luego el PATCH (que es por id) y finalemente el DELETE (que se parece el PATCH solo que
		se logra ocultando al usuario)

		 const findUsers = async (req, res) => {
    			const users = await User.findAll({
        		where: {
            		status: true,
        		},
    		});

    			res.status(200).json({
        			status: 'success',
        			message: 'The users were found successfully',
        			users,
    			});
		};

		const findUser = async (req, res) => {
    			const { id } = req.params;

    			const user = await User.findOne({
        			where: {
            			id,
            			status: true,
        			},
    			});

    		if (!user) {
        		return res.status(404).json({
            		status: 'error',
            		message: 'The user was not found',
        		});
    		}

    		res.status(200).json({
        		status: 'success',
        		message: 'The user was found successfully',
        		user,
    		});
	};


	const createUser = async (req, res) => {
    		const { username, email, password } = req.body;

    		const newUser = await User.create({
        		username,
        		email,
        		password,
    		});

    		res.status(201).json({
        		status: 'success',
        		message: 'The user was created successfully',
        		newUser,
    		});
	};


	const updateUser = async (req, res) => {
    		const { id } = req.params;

    		const { username, email } = req.body;

    		const user = await User.findOne({
        		where: {
            		id,
            		status: true,
        		},
    		});

    		if (!user) {
        		return res.status(404).json({
            		status: 'error',
            		message: 'The user was not found',
   	    		 });
   		 }

    		const updatedUser = await user.update({
       		username,
        		email,
    		});

    		res.json({
        		status: 'success',
       		 message: 'The user has been updated successfully',
        		updatedUser,
   		 });
	};


		const deleteUser = async (req, res) => {
   			 const { id } = req.params;

    			const user = await User.findOne({
        			where: {
           				 id,
           				 status: true,
        			},
    			});

    		if (!user) {
        		return res.status(404).json({
            		status: 'error',
            		message: 'The user was not fount',
        		});
    		}

    		await user.update({ status: false });

    		res.status(200).json({
        		status: 'success',
        		message: 'The user has been delated',
    		});
	};

23. Utilizando mi base de datos en tableplus: Abrir mis configuraciones
	23.1. Name: motoRepair
		Host: localhost (es el que se tiene en el .env)
		Port: 5432 (en teoria es el que usa postgres, pero si se llegase a cambiar, se 
				deberia dar click derecho en postgres de la base de datos -> properties
				-> connection)
		User: el mismo del .env
		Password: el mismo del .env  
		Database: el mismo del .env



(Me quede en crud sequelize min 41)




La clase del viernes 27/01/2023 se realizÃ³ el validIfExistUserEmail del user.middlewares.js

instalacion de express validator en caso de que el front no mande el correo al crear el usuario
npm i express validator
[
        check('username', 'The username must be mandatory').not().isEmpty(),
        check('email', 'The email must be mandatory').not().isEmpty(),
        check('email', 'The email must be a correct format').isEmail(),
        check('password', 'The password must be mandatory').not().isEmpty(),
    ],

		

